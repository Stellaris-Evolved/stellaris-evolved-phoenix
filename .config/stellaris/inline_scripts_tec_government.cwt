inline_scripts = {
    ## context_configs_type = multiple
    governments/tags/value[anything] = {
        ## cardinality = 0..100
        pop_attraction_tag = {
            desc = localisation
            ## replace_scopes = { this = country root = country }
            trigger = single_alias_right[trigger_clause]
        }
    }

    ## context_configs_type = multiple
    ant:governments/conditions/auth_* = {
        value = <authority>
    }

    ## context_configs_type = multiple
    ant:governments/conditions/ethic_*= {
        value = <ethic>
    }


    ## context_configs_type = multiple
    ant:governments/origins/* = {
        value = <civic_or_origin.origin>
    }

    ## context_configs_type = multiple
    ant:governments/conditions/is_* = {
        alias_name[government_trigger] = alias_match_left[government_trigger]
    }

    ## context_configs_type = multiple
    ant:governments/conditions/tec_* = {
        alias_name[government_trigger] = alias_match_left[government_trigger]
    }

    ## context_configs_type = multiple
    governments/conditions/part/tec_civic_value = {
        value = <civic_or_origin>
    }

    ## context_configs_type = multiple
    ant:governments/authorities/* = {
        ## cardinality = 0..inf
        advanced_authority_swap = {
            ### Will also be used to attempt and find an icon from "interface/icons/governments/authorities/"
            ## cardinality = 0..1
            name = localisation
            ### Used to customize the description in the case of a swap
            ## cardinality = 0..1
            description = localisation
            ## cardinality = 0..1
            negative_description = negative_localisation
            ## cardinality = 0..1
            inherit_name = bool
            ### Decides if we should inherit the modifiers from the base Authority and combine it with the advanced authority
            ## cardinality = 0..1
            inherit_effects = bool
            ### Decides if we should inherit the icon of the original authority
            ## cardinality = 0..1
            inherit_icon = bool
            ### Used to swap out the ruler council position
            ## cardinality = 0..1
            ruler_council_position = <councilor>
            ### This will decide when the swap to advanced authority type will be made
            ## cardinality = 0..1
            ## replace_scopes = { this = country root = country }
            trigger = single_alias_right[trigger_clause]
            ### The modifiers that are used instead of the authority after the swap, can include the original by using inherit_effects
            ## cardinality = 0..1
            ## replace_scopes = { this = country root = country }
            modifier = single_alias_right[modifier_clause]
            ### Translation tags used for the authority swap
            ## cardinality = 0..1
            tags = {
                ## cardinality = 1..inf
                localisation
            }
            ### you can either have a hereditary system (has_heir = yes), or an election system (has_heir = no)
            ## cardinality = 0..1
            has_heir = bool
            ### oligarchic generate candidates only from leaders in the country
            ## cardinality = 0..1
            election_type = enum[election_type]
            ## cardinality = 0..1
            election_term_years = int
            ### actual election term = election_term_years +/- election_term_variance
            ## cardinality = 0..1
            election_term_variance = int
            ## cardinality = 0..1
            can_have_emergency_elections = bool
            ### -1 == no limit
            ## cardinality = 0..1
            max_election_candidates = int
            ### If there are multiple options, the one with the highest weight is picked. Scope: Country
            ## replace_scopes = { this = country root = country }
            ## cardinality = 0..1
            weight = {
                alias_name[modifier_rule] = alias_match_left[modifier_rule]
            }
        }
    }

    ## context_configs_type = multiple
    ant:evolved_support/governments/authorities/* = {
        ## cardinality = 0..inf
        advanced_authority_swap = {
            ### Will also be used to attempt and find an icon from "interface/icons/governments/authorities/"
            ## cardinality = 0..1
            name = localisation
            ### Used to customize the description in the case of a swap
            ## cardinality = 0..1
            description = localisation
            ## cardinality = 0..1
            negative_description = negative_localisation
            ## cardinality = 0..1
            inherit_name = bool
            ### Decides if we should inherit the modifiers from the base Authority and combine it with the advanced authority
            ## cardinality = 0..1
            inherit_effects = bool
            ### Decides if we should inherit the icon of the original authority
            ## cardinality = 0..1
            inherit_icon = bool
            ### Used to swap out the ruler council position
            ## cardinality = 0..1
            ruler_council_position = <councilor>
            ### This will decide when the swap to advanced authority type will be made
            ## cardinality = 0..1
            ## replace_scopes = { this = country root = country }
            trigger = single_alias_right[trigger_clause]
            ### The modifiers that are used instead of the authority after the swap, can include the original by using inherit_effects
            ## cardinality = 0..1
            ## replace_scopes = { this = country root = country }
            modifier = single_alias_right[modifier_clause]
            ### Translation tags used for the authority swap
            ## cardinality = 0..1
            tags = {
                ## cardinality = 1..inf
                localisation
            }
            ### you can either have a hereditary system (has_heir = yes), or an election system (has_heir = no)
            ## cardinality = 0..1
            has_heir = bool
            ### oligarchic generate candidates only from leaders in the country
            ## cardinality = 0..1
            election_type = enum[election_type]
            ## cardinality = 0..1
            election_term_years = int
            ### actual election term = election_term_years +/- election_term_variance
            ## cardinality = 0..1
            election_term_variance = int
            ## cardinality = 0..1
            can_have_emergency_elections = bool
            ### -1 == no limit
            ## cardinality = 0..1
            max_election_candidates = int
            ### If there are multiple options, the one with the highest weight is picked. Scope: Country
            ## replace_scopes = { this = country root = country }
            ## cardinality = 0..1
            weight = {
                alias_name[modifier_rule] = alias_match_left[modifier_rule]
            }
        }
    }
}

parameters = {
    ## context_key = inline_script@ethics/governor_pop_attraction
    ETHIC = enum[tec_trimmed_ethic]

    ## context_key = inline_script@ethics/governor_pop_attraction
    ETHIC_OPPOSED = enum[tec_trimmed_ethic]
}